Plain `synchronized` statements now use run-time allocated mutexes.

Synchronized statements have two forms, `synchronized` and `synchronized(exp)`.
When there is no expression argument, a global mutex is created using a static
buffer big enough to store the platform dependant critical section type and a
pointer field.

Example:
```
void main()
{
    synchronized {
        // __gshared byte[40 + 8] __critsec;
        // _d_criticalenter(&__critsec[0]);
        // scope(exit) _d_criticalexit(&__critsec[0]);
        (cast() counter) += 1;
    }
}
```

This implementation suffers from a couple deficiencies. Neither the size nor
alignment of the `critsec` buffer are obtained from the OS critical section
type defined in druntime. As a result, if the size allocated by the compiler is
too small, or the platform has strict alignment requirements, then the program
run-time will crash on entering the synchronized statement.

This code will now call a new implementation that allocates the critical
section lazily at run-time, moving all logic out of the compiler to druntime.
